rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasPermission(permission) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return isAuthenticated() && 
        (userDoc.exists ? userDoc.data.permissions[permission] == true : false);
    }

    function isAdmin() {
      return hasPermission('admin');
    }

    // User document rules
    match /users/{userId} {
      // Allow users to create their own document if authenticated
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Allow read only for the owner or admin
      allow read: if isOwner(userId) || isAdmin();
      
      // Allow write only if the user owns the document and has write permission, or is an admin
      allow update, delete: if (isOwner(userId) && hasPermission('write')) || isAdmin();
      
      // Specific feature permissions
      match /features/{featureName} {
        allow read: if isOwner(userId) && 
          get(/databases/$(database)/documents/users/$(userId)).data.permissions.features[featureName] == true;
        allow write: if false; // Prevent direct feature flag modifications
      }
    }

    // Usage limits tracking
    match /usage_limits/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Meal suggestions
    match /meal_suggestions/{suggestionId} {
      allow read: if hasPermission('features.mealSuggestion');
      allow create, update, delete: if hasPermission('features.mealSuggestion') && hasPermission('write');
    }

    // Image analysis results
    match /image_analysis/{analysisId} {
      allow read: if hasPermission('features.imageAnalysis');
      allow create, update, delete: if hasPermission('features.imageAnalysis') && hasPermission('write');
    }

    // User actions logging
    match /user_actions/{actionId} {
      allow create: if isAuthenticated();
      allow read, delete: if isAdmin();
    }

    // Nutrition tracking
    match /nutrition_logs/{userId} {
      allow read, write: if isOwner(userId) && hasPermission('features.nutritionTracking');
    }

    // Default fallback (very restrictive)
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
