rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Temporarily allow all authenticated users full access during development
    match /{document=**} {
      allow read, write: if request.auth != null;
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User document rules
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
      
      // User's upload rules
      match /upload_rules/{ruleId} {
        allow read: if isOwner(userId);
        allow write: if false; // Only allow updates through Cloud Functions
      }

      // User's notifications
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow write: if false; // Only allow updates through Cloud Functions
      }

      // User's photos
      match /photos/{photoId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && canUploadPhoto(userId);
        allow delete: if isOwner(userId);
      }

      // User's subscription data
      match /subscription/{subscriptionId} {
        allow read: if isOwner(userId);
        allow write: if false; // Only allow updates through Cloud Functions
      }
    }

    // Helper function to check if user can upload more photos
    function canUploadPhoto(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      let uploadRules = get(/databases/$(database)/documents/users/$(userId)/upload_rules/daily);
      
      let isTrialActive = userDoc.data.subscription == 'free' && 
                         userDoc.data.freeTrialPhotoUploadsEndDate > request.time;
      
      let dailyLimit = isTrialActive ? 3 : 
                      (userDoc.data.subscription == 'premium' ? 8 : 0);
      
      return uploadRules.data.count < dailyLimit;
    }

    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
